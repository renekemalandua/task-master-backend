generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  name           String
  email          String     @unique
  password       String     @default("1234")
  status         UserStatus @default(Inactive)
  rating         Float      @default(0.0)
  is_super_admin Boolean    @default(false)
  last_login     DateTime?
  created_at     DateTime   @default(now())

  Task     Task[]
  UserRole UserRole[]

  @@map("users")
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  status      TaskStatus @default(Pending)
  delivery    DateTime
  created_at  DateTime   @default(now())
  User        User?      @relation(fields: [userId], references: [id])
  userId      Int?

  @@map("tasks")
}

model Role {
  id         Int      @id @default(autoincrement())
  role       String   @unique
  created_at DateTime @default(now())

  UserRole       UserRole[]
  PermissionRole PermissionRole[]

  @@map("roles")
}

model Permission {
  id         Int      @id @default(autoincrement())
  permission String   @unique
  created_at DateTime @default(now())

  PermissionRole PermissionRole[]

  @@map("permissions")
}

model PermissionRole {
  id           Int        @id @default(autoincrement())
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
  Role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int

  @@map("permission_role")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  Role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  @@map("user_role")
}

enum UserStatus {
  Active
  Inactive
}

enum TaskStatus {
  Pending
  Progres
  Declined
  Done
}
